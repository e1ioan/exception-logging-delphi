// Make sure JCL is installed on the machine
// 
// 1. Enable JCL Debug Expert -> Insert JDBG data into the binary -> Enable for this project
// 2. All the exception should look like this
// 3. Make sure the debug info are enabled:
// http://docs.atozed.com/docs.dll/development/Using%20the%20Exception%20Logger.html
// ... or see bellow:
// -------------------------------------------------
// Release Configuration: Delphi Compiler->Compiling->Debuging:
// Assertions: true
// Debug information: Debug information
// Local symbols: true
// Symbol reference info: None
// Use debug .dcus: false
// Use imported data references: true
// -------------------------------------------------
// Release Configuration: Delphi Compiler->Linking:
// Debug information: true
// -------------------------------------------------
// To use it in your code:
//  uses mydebuginfo;
//
//  try
//    ...
//  except
//    on e: Exception do
//      MyLogException(e);
//  end;

unit mydebuginfo;

interface

uses
  System.Classes,
  System.SysUtils,
  JclDebug;

const
  ERR_PATH = 'd:\errors\';
  
procedure MyLogException(e: Exception; extraInfo: string = '');

implementation

uses
  System.IOUtils;

procedure MyLogException(e: Exception; extraInfo: string = '');
var
  sl: TStringList;
begin
  sl := TStringList.Create;
  try
    if not extraInfo.IsEmpty then
    begin
      sl.Add(extraInfo);
      sl.Add('----------------------------');
    end;
    sl.Add(e.ClassName + ': ' + e.Message);
    sl.Add('----------------------------');
    JclLastExceptStackListToStrings(sl, False, True, True, False);
    sl.SaveToFile(IncludeTrailingPathDelimiter(ERR_PATH) + ExtractFileName(ParamStr(0)) + FormatDateTime('-yyyy-mm-dd-hhnnsszzz', Now) + '.txt');
  finally
    sl.Free;
  end;
end;

initialization
  // Enable raw mode (default mode uses stack frames which aren't always generated by the compiler)
  Include(JclStackTrackingOptions, stRawMode);
  // Disable stack tracking in dynamically loaded modules (it makes stack tracking code a bit faster)
  Include(JclStackTrackingOptions, stStaticModuleList);
  // Initialize Exception tracking
  JclStartExceptionTracking;
finalization
  JclStopExceptionTracking;

end.
